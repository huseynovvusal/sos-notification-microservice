// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.6
//   protoc               v3.20.3
// source: sos_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  type Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "sos_service";

export interface StartSOSRequest {
  userId: string;
  message: string;
}

export interface StartSOSResponse {
  success: boolean;
}

function createBaseStartSOSRequest(): StartSOSRequest {
  return { userId: "", message: "" };
}

export const StartSOSRequest: MessageFns<StartSOSRequest> = {
  encode(message: StartSOSRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartSOSRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartSOSRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartSOSRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      message: isSet(object.message) ? globalThis.String(object.message) : "",
    };
  },

  toJSON(message: StartSOSRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartSOSRequest>, I>>(base?: I): StartSOSRequest {
    return StartSOSRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartSOSRequest>, I>>(object: I): StartSOSRequest {
    const message = createBaseStartSOSRequest();
    message.userId = object.userId ?? "";
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseStartSOSResponse(): StartSOSResponse {
  return { success: false };
}

export const StartSOSResponse: MessageFns<StartSOSResponse> = {
  encode(message: StartSOSResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StartSOSResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStartSOSResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StartSOSResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: StartSOSResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<StartSOSResponse>, I>>(base?: I): StartSOSResponse {
    return StartSOSResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<StartSOSResponse>, I>>(object: I): StartSOSResponse {
    const message = createBaseStartSOSResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type SOSServiceService = typeof SOSServiceService;
export const SOSServiceService = {
  startSos: {
    path: "/sos_service.SOSService/StartSOS",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: StartSOSRequest): Buffer => Buffer.from(StartSOSRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): StartSOSRequest => StartSOSRequest.decode(value),
    responseSerialize: (value: StartSOSResponse): Buffer => Buffer.from(StartSOSResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): StartSOSResponse => StartSOSResponse.decode(value),
  },
} as const;

export interface SOSServiceServer extends UntypedServiceImplementation {
  startSos: handleUnaryCall<StartSOSRequest, StartSOSResponse>;
}

export interface SOSServiceClient extends Client {
  startSos(
    request: StartSOSRequest,
    callback: (error: ServiceError | null, response: StartSOSResponse) => void,
  ): ClientUnaryCall;
  startSos(
    request: StartSOSRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: StartSOSResponse) => void,
  ): ClientUnaryCall;
  startSos(
    request: StartSOSRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: StartSOSResponse) => void,
  ): ClientUnaryCall;
}

export const SOSServiceClient = makeGenericClientConstructor(
  SOSServiceService,
  "sos_service.SOSService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): SOSServiceClient;
  service: typeof SOSServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
