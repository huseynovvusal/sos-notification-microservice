// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.6
//   protoc               v3.20.3
// source: notification_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  type ChannelCredentials,
  Client,
  type ClientDuplexStream,
  type ClientOptions,
  type handleBidiStreamingCall,
  makeGenericClientConstructor,
  type Metadata,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "notification_service";

export interface LocationStreamRequest {
  userId: string;
  latitude: number;
  longitude: number;
  timestamp: number;
}

export interface LocationStreamResponse {
  success: boolean;
}

function createBaseLocationStreamRequest(): LocationStreamRequest {
  return { userId: "", latitude: 0, longitude: 0, timestamp: 0 };
}

export const LocationStreamRequest: MessageFns<LocationStreamRequest> = {
  encode(message: LocationStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.userId !== "") {
      writer.uint32(10).string(message.userId);
    }
    if (message.latitude !== 0) {
      writer.uint32(17).double(message.latitude);
    }
    if (message.longitude !== 0) {
      writer.uint32(25).double(message.longitude);
    }
    if (message.timestamp !== 0) {
      writer.uint32(32).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.userId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.latitude = reader.double();
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.longitude = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationStreamRequest {
    return {
      userId: isSet(object.userId) ? globalThis.String(object.userId) : "",
      latitude: isSet(object.latitude) ? globalThis.Number(object.latitude) : 0,
      longitude: isSet(object.longitude) ? globalThis.Number(object.longitude) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
    };
  },

  toJSON(message: LocationStreamRequest): unknown {
    const obj: any = {};
    if (message.userId !== "") {
      obj.userId = message.userId;
    }
    if (message.latitude !== 0) {
      obj.latitude = message.latitude;
    }
    if (message.longitude !== 0) {
      obj.longitude = message.longitude;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocationStreamRequest>, I>>(base?: I): LocationStreamRequest {
    return LocationStreamRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocationStreamRequest>, I>>(object: I): LocationStreamRequest {
    const message = createBaseLocationStreamRequest();
    message.userId = object.userId ?? "";
    message.latitude = object.latitude ?? 0;
    message.longitude = object.longitude ?? 0;
    message.timestamp = object.timestamp ?? 0;
    return message;
  },
};

function createBaseLocationStreamResponse(): LocationStreamResponse {
  return { success: false };
}

export const LocationStreamResponse: MessageFns<LocationStreamResponse> = {
  encode(message: LocationStreamResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocationStreamResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocationStreamResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocationStreamResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: LocationStreamResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocationStreamResponse>, I>>(base?: I): LocationStreamResponse {
    return LocationStreamResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocationStreamResponse>, I>>(object: I): LocationStreamResponse {
    const message = createBaseLocationStreamResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type NotificationServiceService = typeof NotificationServiceService;
export const NotificationServiceService = {
  streamLocation: {
    path: "/notification_service.NotificationService/StreamLocation",
    requestStream: true,
    responseStream: true,
    requestSerialize: (value: LocationStreamRequest): Buffer =>
      Buffer.from(LocationStreamRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer): LocationStreamRequest => LocationStreamRequest.decode(value),
    responseSerialize: (value: LocationStreamResponse): Buffer =>
      Buffer.from(LocationStreamResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer): LocationStreamResponse => LocationStreamResponse.decode(value),
  },
} as const;

export interface NotificationServiceServer extends UntypedServiceImplementation {
  streamLocation: handleBidiStreamingCall<LocationStreamRequest, LocationStreamResponse>;
}

export interface NotificationServiceClient extends Client {
  streamLocation(): ClientDuplexStream<LocationStreamRequest, LocationStreamResponse>;
  streamLocation(options: Partial<CallOptions>): ClientDuplexStream<LocationStreamRequest, LocationStreamResponse>;
  streamLocation(
    metadata: Metadata,
    options?: Partial<CallOptions>,
  ): ClientDuplexStream<LocationStreamRequest, LocationStreamResponse>;
}

export const NotificationServiceClient = makeGenericClientConstructor(
  NotificationServiceService,
  "notification_service.NotificationService",
) as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): NotificationServiceClient;
  service: typeof NotificationServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
